import { VerticalBox, Button, LineEdit, CheckBox, TextEdit, Palette, StandardButton } from "std-widgets.slint";

component FileButton inherits Button {
    text: "üóÇÔ∏è";
    max-height: 30px;
    max-width: 30px;
}

export component Application inherits Window {
    title: "nekotatsu";
    icon: @image-url("../../assets/logo.png");

    callback update-clicked();
    callback convert-clicked();
    callback input-clicked();
    callback output-clicked();

    in-out property <string> popup-text;
    in-out property <string> in-path;
    in-out property <string> out-path;
    in-out property <string> library-name: "Library";
    in-out property <bool> processing;

    out property <bool> view-output: true;
    out property <bool> verbose-output: false;
    out property <bool> soft-match: false;

    main-area := TouchArea {
        height: parent.height;
        width: parent.width;
        pointer-event(event) => {
            if event.kind == PointerEventKind.move {
                if !soft-match-area.has-hover {
                    soft-match-tooltip.visible = false;
                }
            }
        }
    }
    VerticalBox {
        alignment: start;
        Button {
            text: "Update Sources and Parsers";
            enabled: !processing;
            max-height: self.min-height;
            clicked => { update-clicked() }
        }
        HorizontalLayout {
            FileButton {
                clicked => { input-clicked() }
            }
            input-path := LineEdit {
                placeholder-text: "/path/to/input";
                text: in-path;
                edited => { in-path = self.text }
            }
        }
        HorizontalLayout {
            FileButton {
                clicked => { output-clicked() }
            }
            output-path := LineEdit {
                placeholder-text: "/path/to/output";
                text: out-path;
                edited => { out-path = self.text }
            }
        }
        HorizontalLayout {
            Text {
                vertical-alignment: center;
                text: "Library Name";
            }
            LineEdit {
                placeholder-text: "Library";
                text: library-name;
                edited => { library-name = self.text }
            }
        }
        Button {
            text: "Convert";
            enabled: !processing && in-path != "" && out-path != "" && library-name != "";
            max-height: self.min-height;
            clicked => {
                convert-clicked()
            }
        }
        CheckBox {
            checked: view-output;
            toggled => { view-output = self.checked }
            text: "View Output";
        }
        CheckBox {
            enabled: view-output;
            checked: verbose-output;
            toggled => { verbose-output = self.checked }
            text: "Verbose Output";
        }
        Rectangle {
            HorizontalLayout {
                CheckBox {
                    checked: soft-match;
                    toggled => { soft-match = self.checked }
                    text: "Soft Match";
                }
            }
            soft-match-area := TouchArea {
                z: 10;
                height: parent.height; enabled: true;
                mouse-cursor: MouseCursor.help;
                width: parent.width;
                soft-match-tooltip := Rectangle {
                    visible: false;
                    background: Palette.background;
                    HorizontalLayout {
                        Text { text: "Allow disregarding top-level domain\n(i.e. mangadex.org could match mangadex.com)"; }
                    }
                }
                clicked => { soft-match = !soft-match }
                pointer-event(event) => {
                    if event.kind == PointerEventKind.move {
                        if self.has-hover {
                            soft-match-tooltip.visible = true;
                            soft-match-tooltip.x = 0;
                            soft-match-tooltip.y = self.mouse-y - soft-match-tooltip.height;
                        }
                    }
                }
            }
        }
        Rectangle {}
    }
}

export component ChildWindow inherits Dialog {
    title: "Output";
    icon: @image-url("../../assets/logo.png");

    callback close-clicked();

    in property <string> child-text;
    // for some reason viewport height isn't calculating properly, so this needs to be calculated manually
    // note: issue only seems to occur on linux (regardless of backend)
    in property <int> lines;
    in property <string> description;
    in property <int> init-height;

    preferred-height: init-height * 1px;
    preferred-width: 4in;

    VerticalLayout {
        Text {
            text: description;
        }
        output := TextEdit {
            wrap: no-wrap;
            text: child-text;
            read-only: true;
            viewport-height: lines * (root.default-font-size + 8px);
            visible: child-text != "";
        }
    }
    StandardButton {
        kind: StandardButtonKind.close; 
        clicked => { close-clicked(); }
    }
    Button {
        text: "Copy to Clipboard";
        dialog-button-role: action;
        clicked => {
            output.select-all();
            output.copy();
            output.set-selection-offsets(0, 0);
        }
    }
}
